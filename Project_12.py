#!/usr/bin/python
import math

# Uses code from http://stackoverflow.com/a/171779

divisors = 500

def divisorGenerator(n):
    large_divisors = []
    
    for i in xrange(1, int(math.sqrt(n) + 1)):
        if n % i == 0:
            yield i
            
            if i*i != n:
                large_divisors.append(n / i)
            # End if
        # End if
    # End for
    
    for divisor in reversed(large_divisors):
        yield divisor
    # End for
# End def

def main():
    i = 1
    t_num = 1
    num_div = 1
    
    while True:
        num_div = len( list( divisorGenerator(t_num) ) )
        
        if num_div > divisors: break
        
        i += 1
        t_num += i
        if i % 100 == 0: print "Tested %s." % i
    # End while
    
    print "The first triangle number with more than %s divisors is %s, with a total of %s divisors." % (divisors, t_num, num_div)
# End def

if __name__ == "__main__":
    main()
# End if

# Goal:
"""The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?"""